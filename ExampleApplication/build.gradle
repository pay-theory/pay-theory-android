plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'maven-publish'
    id 'jacoco'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.paytheory.android.example"
        minSdkVersion 26
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug{
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            testCoverageEnabled true
        }

    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
        }
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ]))
}

task copyReport(type: Copy) {
    mkdir 'jacocoReport'
    from "build/reports/coverage/debug"
    include "*.xml"
    into "$projectDir/jacocoReport" // Into the project root, one level above the app folder
}
task copyApk(type: Copy) {
    mkdir 'apk'
    from "build/outputs/apk"
    into "$projectDir/apk" // Into the project root, one level above the app folder
}

task buildWithReport {
    dependsOn 'clean'
    dependsOn 'build'
    dependsOn 'publish'
    dependsOn 'jacocoTestReport'
    dependsOn 'copyReport'
    dependsOn 'copyApk'
    tasks.findByName('build').mustRunAfter 'clean'
    tasks.findByName('publish').mustRunAfter 'build'
    tasks.findByName('jacocoTestReport').mustRunAfter 'publish'
    tasks.findByName('copyReport').mustRunAfter 'jacocoTestReport'
    tasks.findByName('copyApk').mustRunAfter 'copyReport'
}


dependencies {

    //added to use PayTheorySDK as library
    implementation project(path: ':AndroidSDK')
    implementation 'net.java.dev.jna:jna:5.8.0@aar'
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    //Testing
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'androidx.core:core-ktx:1.3.2'
    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.3'

    androidTestImplementation 'androidx.test.ext:junit-ktx:1.1.2'
    androidTestImplementation 'androidx.test:core-ktx:1.3.0'

    //Testing
    testImplementation 'org.robolectric:robolectric:4.4'
    testImplementation 'androidx.test.ext:junit:1.1.2'
    testImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    testImplementation 'androidx.fragment:fragment-testing:1.3.3'
    testImplementation 'androidx.core:core-ktx:1.3.2'
    testImplementation 'androidx.test:rules:1.3.0'
    testImplementation 'junit:junit:4.13.2'
    testImplementation("io.strikt:strikt-core:0.30.0")
    testImplementation('com.squareup.okhttp3:okhttp:5.0.0-alpha.2')
    testImplementation('com.squareup.retrofit2:retrofit:2.9.0')
    testImplementation('com.squareup.retrofit2:adapter-rxjava2:2.9.0')
    testImplementation('com.squareup.retrofit2:converter-gson:2.9.0')
    testImplementation('net.java.dev.jna:jna:5.8.0@aar')
    testImplementation('com.github.terl:lazysodium-android:4.3.1@aar')
    testImplementation 'com.squareup.retrofit2:retrofit:2.9.0'
    testImplementation 'com.squareup.retrofit2:adapter-rxjava3:2.9.0'
    testImplementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    testImplementation 'com.squareup.retrofit2:adapter-rxjava2:2.9.0'
    testImplementation 'com.squareup.retrofit2:converter-scalars:2.9.0'
    testImplementation "org.mockito.kotlin:mockito-kotlin:3.2.0"
    testImplementation "org.mockito:mockito-inline:3.10.0"
    testImplementation 'androidx.lifecycle:lifecycle-viewmodel:2.3.1@aar'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.3'
    testImplementation 'android.arch.core:core-testing:2.1.0'
}